/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 * This file is autogenerated. Do not edit this file directly.
 */

import { dataSourcesInfo } from "../../../.power/appschemas/dataSourcesInfo";
import type { IOperationResult } from "@microsoft/power-apps/lib";
import { getPowerSdkInstance } from "@microsoft/power-apps/lib";
import type { IGetOptions, IGetAllOptions } from "../models/CommonModels";
import type { cr2b6_operations } from "../models/cr2b6_operationsModel";

export class cr2b6_operationsService {
  private static readonly dataSourceName = "cr2b6_operations";

  private static readonly client = getPowerSdkInstance(dataSourcesInfo).Data;

  public static async create(
    record: Omit<cr2b6_operations, "cr2b6_operationid">
  ): Promise<IOperationResult<cr2b6_operations>> {
    const result = await cr2b6_operationsService.client.createRecordAsync<
      Omit<cr2b6_operations, "cr2b6_operationid">,
      cr2b6_operations
    >(cr2b6_operationsService.dataSourceName, record);
    return result;
  }

  public static async update(
    id: string,
    changedFields: Partial<Omit<cr2b6_operations, "cr2b6_operationid">>
  ): Promise<IOperationResult<cr2b6_operations>> {
    const result = await cr2b6_operationsService.client.updateRecordAsync<
      Partial<Omit<cr2b6_operations, "cr2b6_operationid">>,
      cr2b6_operations
    >(cr2b6_operationsService.dataSourceName, id.toString(), changedFields);
    return result;
  }

  public static async delete(id: string): Promise<void> {
    await cr2b6_operationsService.client.deleteRecordAsync(
      cr2b6_operationsService.dataSourceName,
      id.toString()
    );
  }

  public static async get(
    id: string,
    options?: IGetOptions
  ): Promise<IOperationResult<cr2b6_operations>> {
    const result =
      await cr2b6_operationsService.client.retrieveRecordAsync<cr2b6_operations>(
        cr2b6_operationsService.dataSourceName,
        id.toString(),
        options
      );
    return result;
  }

  public static async getAll(
    options?: IGetAllOptions
  ): Promise<IOperationResult<cr2b6_operations[]>> {
    const result =
      await cr2b6_operationsService.client.retrieveMultipleRecordsAsync<cr2b6_operations>(
        cr2b6_operationsService.dataSourceName,
        options
      );
    return result;
  }
}
